node {
    
    def WORKSPACE = pwd()
    def mvnHome = tool 'maven'
    def token = readFile('/var/run/secrets/kubernetes.io/serviceaccount/token')
       
   stage 'Checkout'

       checkout scm
       
  stage 'Retrieve Rules'

       sh """
           ${mvnHome}/bin/mvn clean org.apache.maven.plugins:maven-dependency-plugin:copy -Dartifact=com.redhat:coolstore:${parsed_version} -Dmdep.stripVersion=true -DoutputDirectory=target/s2i-build
       """


    stage 'OpenShift Build'
      
        try {
            // Prepare Artifacts
            sh """
                mkdir -p ${WORKSPACE}/projects/coolstore-kjar-s2i/target/s2i-build/deployments
                mv ${WORKSPACE}/projects/coolstore-kjar-s2i/target/s2i-build/*.jar ${WORKSPACE}/projects/coolstore-kjar-s2i/target/s2i-build/deployments/
                mkdir -p ${WORKSPACE}/projects/coolstore-kjar-s2i/target/s2i-build/.sti
                cp ${WORKSPACE}/projects/coolstore-kjar-s2i/version.properties ${WORKSPACE}/projects/coolstore-kjar-s2i/target/s2i-build/.sti/environment
                tar -cvf ${WORKSPACE}/projects/coolstore-kjar-s2i/target/coolstore.tar -C ${WORKSPACE}/projects/coolstore-kjar-s2i/target/s2i-build .
                """
            
            // Push Artifacts to build image
            sh """
                set +x
                ${WORKSPACE}/support/scripts/trigger-monitor-build.sh -h=${OPENSHIFT_HOST} -p=${OPENSHIFT_PORT} -t=${token} -n=${OPENSHIFT_SOURCE_PROJECT} -a=${OPENSHIFT_SOURCE_APPLICATION} -f="${WORKSPACE}/projects/coolstore-kjar-s2i/target/coolstore.tar"

                ${WORKSPACE}/support/scripts/verify-deploy.sh -h=${OPENSHIFT_HOST} -p=${OPENSHIFT_PORT} -t=${token} -n=${OPENSHIFT_SOURCE_PROJECT} -a=${OPENSHIFT_SOURCE_APPLICATION}
            """
  
        }
        catch(e) {
            currentBuild.result = 'FAILURE'
            throw e
        }
        finally {
            processStageResult()
        }
        
    stage 'Acceptance Test'
           
        try {
                                
            sh """
                cd projects/coolstore-kjar-s2i
                ${mvnHome}/bin/mvn -Dmaven.test.failure.ignore clean test -DKIE_SERVER_URL=$KIE_SERVER_URL -DKIE_SERVER_USER=${env.KIE_SERVER_USER} -DKIE_SERVER_PASSWORD=${env.KIE_SERVER_PASSWORD}
                
            """

            step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
   
            step([$class: 'CucumberReportPublisher', fileExcludePattern: '', fileIncludePattern: '', ignoreFailedTests: false, jenkinsBasePath: '', jsonReportDirectory: 'projects/coolstore-kjar-s2i/target', missingFails: false, parallelTesting: false, pendingFails: false, skippedFails: false, undefinedFails: false])

            step([$class: 'CukedoctorPublisher', featuresDir: 'projects/coolstore-kjar-s2i', numbered: true, sectAnchors: true, toc: 'RIGHT', format: 'HTML', title: 'Living Documentation'])
                
        }
        catch(e) {
            currentBuild.result = 'FAILURE'
            throw e
        }
        finally {
            processStageResult()
        }

        
    stage "Deploy to Production"
	
        input "Deploy Application to Production?"
    
        try {    
        
            println("Deploying to Production...")
        

            // Promote Application support scripts
            sh """
                set +x
                    
                ${WORKSPACE}/support/scripts/is-tag.sh -h=${OPENSHIFT_HOST} -p=${OPENSHIFT_PORT} -t=${token} -sn=${OPENSHIFT_SOURCE_PROJECT} -sa=${OPENSHIFT_SOURCE_APPLICATION} -dn=${OPENSHIFT_DESTINATION_PROJECT} -da=${OPENSHIFT_DESTINATION_APPLICATION}
    
                sleep 5s 
             
                ${WORKSPACE}/support/scripts/verify-deploy.sh -h=${OPENSHIFT_HOST} -p=${OPENSHIFT_PORT} -t=${token} -n=${OPENSHIFT_DESTINATION_PROJECT} -a=${OPENSHIFT_DESTINATION_APPLICATION}
            
            """


        }
        catch(e) {
            currentBuild.result = 'FAILURE'
            throw e
        }
        finally {
            processStageResult()
        }        
}

def processStageResult() {
//    step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: "${EMAIL}", sendToIndividuals: false])

    if (currentBuild.result != null && currentBuild.result != "SUCCESS") {
        sh "exit 1"
    }
}
